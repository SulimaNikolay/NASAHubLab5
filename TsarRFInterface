// nrf24_server.pde
// -*- mode: C++ -*-
// Example sketch showing how to create a simple messageing server
// with the RH_NRF24 class. RH_NRF24 class does not provide for addressing or
// reliability, so you should only use RH_NRF24  if you do not need the higher
// level messaging abilities.
// It is designed to work with the other example nrf24_client
// Tested on Uno with Sparkfun NRF25L01 module
// Tested on Anarduino Mini (http://www.anarduino.com/mini/) with RFM73 module
// Tested on Arduino Mega with Sparkfun WRL-00691 NRF25L01 module

#include <SPI.h>
#include <RH_NRF24.h>

#include <Wire.h>





// Singleton instance of the radio driver
RH_NRF24 nrf24;
// RH_NRF24 nrf24(8, 7); // use this to be electrically compatible with Mirf
// RH_NRF24 nrf24(8, 10);// For Leonardo, need explicit SS pin
// RH_NRF24 nrf24(8, 7); // For RFM73 on Anarduino Mini

















void setup()
{ 
  Serial.begin(9600);    
  if (!nrf24.init()){};
    //Serial.println("init failed");
  if (!nrf24.setChannel(1)){};
  //  Serial.println("setChannel failed");
  if (!nrf24.setRF(RH_NRF24::DataRate2Mbps, RH_NRF24::TransmitPower0dBm)) {};
  // Serial.println("setRF failed");

Wire.begin();   

}







String aa = "";
String bb = "";
String cc = "";

uint8_t data[4];
uint8_t sen[12];


void loop()
{

  cc = "";
  aa = "";
  bb = "";
//
  if (nrf24.available())
  { 
    //utilize command from remote control
    uint8_t buf[RH_NRF24_MAX_MESSAGE_LEN];
    uint8_t len = sizeof(buf);
    if (nrf24.recv(buf, &len))
    {



  

 char str[4];
//
     for (int k = 0; k < 4; k++)
     {
       aa = aa + buf[k];
       bb = bb + buf[k + 4];
      cc = cc + buf[k + 8];
    }

Serial.println(aa+"  "+bb+"  "+cc);

 for (int z = 0; z < 13; z++)
      {
        sen[z] = 0;
      }

      int A00 = aa.toInt();

    String   ss = String(A00);
      data[1] = 0;
      data[2] = 0;
      data[3] = 0;
      data[4] = 0;

String ss2="";




      switch (ss.length())
      { case 1: ss2="000"+ss;  break;
        case 2: ss2="00"+ss[1]+ss[2];  break;
        case 3:  ss2="0"+ss[1]+ss[2]+ss[3];  break;
        case 4:  ss2=ss;  break;
      }

   char lss[5];   
aa.toCharArray(lss, 5);




Wire.beginTransmission(8); // transmit to device #8
aa.toCharArray(lss, 5);
  Wire.write(lss);        // sends five bytes
bb.toCharArray(lss, 5);
  Wire.write(lss);        // sends five bytes
  cc.toCharArray(lss, 5);
  Wire.write(lss);        // sends five bytes
//0516 0536 04048
//0000 0002 0004 8

  
  //Wire.write(sen,4);              // sends one byte
  Wire.endTransmission();    // stop transmitting

//itoa(aa.toInt(), str, 10); 
//Serial.print(aa);
//Serial.print("  ");
//itoa(bb.toInt(), str, 10); 
//Serial.print(bb);
//itoa(cc.toInt(), str, 10); 
//Serial.write(str);


//
//      Serial.println(aa.toInt());
//      //LEFT - 0, RIGHT - 1024
      //Serial.print(' ');
     // Serial.print(bb.toInt());//UP - 0, DOWN - 1024
      //Serial.print(' ');
      //Serial.println(cc.toInt());//PRESS - 0
   // char Str1[4];
    
//aa.toCharArray(Str1, sizeof(Str1));


//Serial.println(Str1);










 // Wire.write(Str1);    // send character string 
 // Wire.send(x);    // send one byte data to slave
 
//  x++; //variable x plus one
//  if(x==2)    //if variable x value is 2, assign 0 to variable x
//  x=0;
  //delay(200);    //delay one second
 // Wire.requestFrom(1, 1);    //request one byte from slave 4
  //while(Wire.available()>0)    // when data is received from slave to master
 // {
//    byte c = Wire.read();    //receive one byte from slave and assign to variable c
////if c is 1, light up led
//if(c==1)
//    {digitalWrite(LED,LOW);}
//    else
//     {digitalWrite(LED,HIGH);}
  //}
 // delay(1000);




  

      //Serial.print("X Sensor value: ");
      //Serial.println(x);

    //  delay (100);



      // ---Send data from sensors to remote---
      for (int z = 0; z < 13; z++)
      {
        sen[z] = 0;
      }

       A00 = analogRead(A0);

       ss = String(A00);
      data[1] = 0;
      data[2] = 0;
      data[3] = 0;
      data[4] = 0;


      switch (ss.length())
      { case 1: data[4] = ss.charAt(0) - '0';   break;
        case 2:  data[3] = ss.charAt(0) - '0'; data[4] = ss.charAt(1) - '0';  break;
        case 3:  data[2] = ss.charAt(0) - '0';  data[3] = ss.charAt(1) - '0'; data[4] = ss.charAt(2) - '0';  break;
        case 4:  data[1] = ss.charAt(0) - '0';  data[2] = ss.charAt(1) - '0'; data[3] = ss.charAt(2) - '0'; data[4] = ss.charAt(3) - '0'; break;
      }


      sen[0] = data[1];
      sen[1] = data[2];
      sen[2] = data[3];
      sen[3] = data[4];


      int A1 = analogRead(A1);

      ss = String(A1);
      data[1] = 0;
      data[2] = 0;
      data[3] = 0;
      data[4] = 0;

      switch (ss.length())
      { case 1: data[4] = ss.charAt(0) - '0';   break;
        case 2:  data[3] = ss.charAt(0) - '0'; data[4] = ss.charAt(1) - '0';  break;
        case 3:  data[2] = ss.charAt(0) - '0';  data[3] = ss.charAt(1) - '0'; data[4] = ss.charAt(2) - '0';  break;
        case 4:  data[1] = ss.charAt(0) - '0';  data[2] = ss.charAt(1) - '0'; data[3] = ss.charAt(2) - '0'; data[4] = ss.charAt(3) - '0'; break;
      }

      sen[4] = data[1];
      sen[5] = data[2];
      sen[6] = data[3];
      sen[7] = data[4];

      int A33 = analogRead(A3);

      ss = String(A33);
      data[1] = 0;
      data[2] = 0;
      data[3] = 0;
      data[4] = 0;

      switch (ss.length())
      { case 1: data[4] = ss.charAt(0) - '0';   break;
        case 2:  data[3] = ss.charAt(0) - '0'; data[4] = ss.charAt(1) - '0';  break;
        case 3:  data[2] = ss.charAt(0) - '0';  data[3] = ss.charAt(1) - '0'; data[4] = ss.charAt(2) - '0';  break;
        case 4:  data[1] = ss.charAt(0) - '0';  data[2] = ss.charAt(1) - '0'; data[3] = ss.charAt(2) - '0'; data[4] = ss.charAt(3) - '0'; break;
      }

      sen[8] = data[1];
      sen[9] = data[2];
      sen[10] = data[3];
      sen[11] = data[4];

//      for (int k = 0; k < 12; k++)
//      {
//        Serial.print(sen[k]);
//      }
//      Serial.print(' ');

      // nrf24.send(data, sizeof(data));
      nrf24.send(sen, sizeof(sen));
     // Serial.println((char*)sen);
      nrf24.waitPacketSent();

   //   Serial.println("Sent a reply");
      //-----------
    }
    else
    {
  //    Serial.println("recv failed");
    }
  }
  delay(100);
}
